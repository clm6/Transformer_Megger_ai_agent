#!/usr/bin/env python3
"""
Show JSON Analysis Results - Display structured TRAX analysis data
"""

import json
import os
import sys
from datetime import datetime

def format_status(status):
    """Format status with emojis"""
    if status == "CRITICAL":
        return "‚ùó CRITICAL"
    elif status == "WARNING":
        return "‚ö†Ô∏è WARNING"
    elif status == "OK":
        return "‚úÖ OK"
    else:
        return status

def show_json_analysis(json_file_path):
    """Display JSON analysis results in readable format"""
    
    if not os.path.exists(json_file_path):
        print(f"‚ùå File not found: {json_file_path}")
        return
    
    try:
        with open(json_file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        print("üîç TRANSFORMER DIAGNOSTIC AGENT - JSON ANALYSIS RESULTS")
        print("=" * 70)
        
        # Report Metadata
        if 'report_metadata' in data:
            meta = data['report_metadata']
            print(f"üìÑ File: {meta.get('file_name', 'N/A')}")
            print(f"üìÖ Analysis Date: {meta.get('analysis_date', 'N/A')}")
            print(f"üîß Generated By: {meta.get('generated_by', 'N/A')}")
            print("=" * 70)
        
        # Winding Resistance Analysis
        if 'winding_resistance' in data:
            print("\nüîå WINDING RESISTANCE ANALYSIS")
            print("-" * 40)
            
            # LV Windings
            if 'lv_windings' in data['winding_resistance']:
                print("LV Side:")
                for winding in data['winding_resistance']['lv_windings']:
                    print(f"  ‚Ä¢ {winding.get('phase', 'N/A')} ({winding.get('tap_position', 'N/A')}): "
                          f"{winding.get('resistance_mohm', 'N/A')} mŒ© "
                          f"[Stability: {winding.get('stability_percent', 'N/A')}%]")
            
            # HV Windings
            if 'hv_windings' in data['winding_resistance']:
                print("HV Side:")
                for winding in data['winding_resistance']['hv_windings']:
                    print(f"  ‚Ä¢ {winding.get('phase', 'N/A')} ({winding.get('tap_position', 'N/A')}): "
                          f"{winding.get('resistance_ohm', 'N/A')} Œ© "
                          f"[Stability: {winding.get('stability_percent', 'N/A')}%]")
        
        # Turns Ratio Analysis
        if 'turns_ratio' in data and data['turns_ratio']:
            print("\n‚ö° TURNS RATIO & EXCITATION CURRENT")
            print("-" * 40)
            for ratio in data['turns_ratio']:
                print(f"  ‚Ä¢ Tap {ratio.get('tap_position', 'N/A')}: "
                      f"Error {ratio.get('error_percent', 'N/A')}%, "
                      f"Current {ratio.get('excitation_current_ua', 'N/A')} ¬µA")
        
        # Tan Delta Analysis
        if 'tan_delta' in data:
            print("\nüß™ TAN DELTA / POWER FACTOR ANALYSIS")
            print("-" * 40)
            print("Section    PF @ 20¬∞C    Status")
            print("-" * 40)
            for section, details in data['tan_delta'].items():
                pf_value = details.get('pf_20c_percent', 'N/A')
                status = format_status(details.get('status', 'N/A'))
                print(f"{section:<10} {pf_value}%        {status}")
        
        # Bushing Power Factor Analysis
        if 'bushing_pf' in data:
            print("\nüîå BUSHING C1 POWER FACTOR ANALYSIS")
            print("-" * 50)
            print("Bushing    %PF @ 20¬∞C    1Hz %PF    Status")
            print("-" * 50)
            for bushing, details in data['bushing_pf'].items():
                pf_20c = details.get('pf_20c_percent', 'N/A')
                pf_1hz = details.get('pf_1hz_percent', 'N/A')
                status = format_status(details.get('status', 'N/A'))
                print(f"{bushing:<10} {pf_20c}%         {pf_1hz}%      {status}")
        
        # Demagnetization
        if 'demagnetization' in data:
            print("\nüß≤ DEMAGNETIZATION & REMANENCE")
            print("-" * 40)
            demag = data['demagnetization']
            print(f"‚Ä¢ Initial Remanence: {demag.get('initial_remanence_percent', 'N/A')}%")
            print(f"‚Ä¢ Final Remanence: {demag.get('final_remanence_percent', 'N/A')}%")
            print(f"‚Ä¢ Effectiveness: {demag.get('effectiveness', 'N/A')}")
        
        # Health Assessment Summary
        if 'health_assessment' in data:
            print("\nüè• HEALTH ASSESSMENT SUMMARY")
            print("-" * 50)
            print("Category                    Status      Comments")
            print("-" * 50)
            for category, details in data['health_assessment'].items():
                cat_name = category.replace('_', ' ').title()
                status = format_status(details.get('status', 'N/A'))
                comments = details.get('comments', 'N/A')[:30] + "..." if len(details.get('comments', '')) > 30 else details.get('comments', 'N/A')
                print(f"{cat_name:<26} {status:<11} {comments}")
        
        # Recommendations
        if 'recommendations' in data:
            print("\nüîß TECHNICAL RECOMMENDATIONS")
            print("-" * 40)
            recs = data['recommendations']
            
            if recs.get('immediate'):
                print("‚ö° IMMEDIATE:")
                for rec in recs['immediate']:
                    print(f"  ‚Ä¢ {rec}")
            
            if recs.get('critical_actions'):
                print("\n‚ùó CRITICAL ACTIONS:")
                for action in recs['critical_actions']:
                    print(f"  ‚Ä¢ {action}")
            
            if recs.get('near_term_6_12_months'):
                print("\n‚è∞ NEAR-TERM (6-12 months):")
                for rec in recs['near_term_6_12_months']:
                    print(f"  ‚Ä¢ {rec}")
        
        print("\n" + "=" * 70)
        print("‚úÖ JSON Analysis Display Complete")
        
    except json.JSONDecodeError as e:
        print(f"‚ùå Error parsing JSON: {e}")
    except Exception as e:
        print(f"‚ùå Error: {e}")

def find_latest_json():
    """Find the most recent JSON analysis file"""
    current_dir = os.getcwd()
    json_files = [f for f in os.listdir(current_dir) if f.startswith('trax_analysis_') and f.endswith('.json')]
    
    if not json_files:
        # Check in the Downloads folder
        downloads_folder = "C:\\Users\\craig\\Downloads\\TRAX_Reports"
        if os.path.exists(downloads_folder):
            json_files = [os.path.join(downloads_folder, f) 
                         for f in os.listdir(downloads_folder) 
                         if f.startswith('trax_analysis_') and f.endswith('.json')]
    
    if json_files:
        # Return the most recent file
        latest_file = max(json_files, key=lambda x: os.path.getmtime(x) if os.path.isfile(x) else 0)
        return latest_file
    
    return None

if __name__ == "__main__":
    if len(sys.argv) > 1:
        json_file = sys.argv[1]
    else:
        # Try to find the latest JSON file
        json_file = find_latest_json()
        if not json_file:
            print("Usage: python show_json_results.py [json_file_path]")
            print("No JSON analysis files found. Run main_json_analyzer.py first.")
            sys.exit(1)
        print(f"üìÑ Using latest JSON file: {os.path.basename(json_file)}")
    
    show_json_analysis(json_file) 