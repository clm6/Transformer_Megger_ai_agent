import pandas as pd
import os
from docx import Document
from docx.shared import Inches, Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.enum.style import WD_STYLE_TYPE
from datetime import datetime

def create_word_report():
    # Path to the enhanced analysis file
    file_path = r'C:\Users\craig\Downloads\TRAX_Reports\trax_enhanced_diagnostics_summary.csv'
    
    if not os.path.exists(file_path):
        print("❌ Enhanced analysis file not found at:", file_path)
        return
    
    # Read the analysis data
    df = pd.read_csv(file_path)
    filename = df['Filename'].iloc[0]
    analysis_text = df['Enhanced_Technical_Analysis'].iloc[0]
    
    # Create a new Word document
    doc = Document()
    
    # Set up document properties
    doc.core_properties.title = f"TRAX Diagnostic Report - {filename}"
    doc.core_properties.author = "TRAX AI Analyzer"
    doc.core_properties.subject = "Transformer Diagnostic Analysis"
    
    # Title page
    title = doc.add_heading('TRANSFORMER DIAGNOSTIC REPORT', 0)
    title.alignment = WD_ALIGN_PARAGRAPH.CENTER
    
    # Add subtitle
    subtitle = doc.add_paragraph()
    subtitle.alignment = WD_ALIGN_PARAGRAPH.CENTER
    run = subtitle.add_run('Enhanced Technical Analysis')
    run.font.size = Pt(16)
    run.bold = True
    
    # Add spacing
    doc.add_paragraph()
    
    # Report details table
    details_table = doc.add_table(rows=4, cols=2)
    details_table.style = 'Table Grid'
    
    # Populate details table
    details_data = [
        ['Report File:', filename],
        ['Analysis Date:', datetime.now().strftime('%B %d, %Y')],
        ['Analysis Type:', 'Enhanced Technical Analysis'],
        ['Generated By:', 'TRAX AI Analyzer v2.0']
    ]
    
    for i, (label, value) in enumerate(details_data):
        row = details_table.rows[i]
        row.cells[0].text = label
        row.cells[1].text = value
        # Make labels bold
        row.cells[0].paragraphs[0].runs[0].bold = True
    
    # Add page break
    doc.add_page_break()
    
    # Process and format the analysis text
    sections = analysis_text.split('###')
    
    for section in sections:
        if section.strip():
            lines = section.strip().split('\n')
            if lines:
                # Section header
                header_text = lines[0].strip()
                if header_text:
                    # Clean up header text (remove emojis and markdown)
                    clean_header = header_text.replace('🔍', '').replace('⚡', '').replace('🔌', '').replace('🧯', '').replace('🧲', '').replace('🧠', '').replace('🔧', '').replace('**', '').strip()
                    
                    if clean_header:
                        heading = doc.add_heading(clean_header, level=1)
                        heading.style.font.color.rgb = None  # Use default color
                
                # Section content
                content_lines = lines[1:]
                current_para = None
                in_table = False
                table_data = []
                
                for line in content_lines:
                    line = line.strip()
                    if not line:
                        continue
                    
                    # Check if this is a table row
                    if '|' in line and line.count('|') >= 2:
                        if not in_table:
                            in_table = True
                            table_data = []
                        
                        # Parse table row
                        cells = [cell.strip() for cell in line.split('|') if cell.strip()]
                        if cells:
                            table_data.append(cells)
                    else:
                        # If we were in a table, create it now
                        if in_table and table_data:
                            create_table_in_doc(doc, table_data)
                            table_data = []
                            in_table = False
                        
                        # Regular text processing
                        if line.startswith('- '):
                            # Bullet point
                            para = doc.add_paragraph()
                            para.style = 'List Bullet'
                            para.add_run(line[2:])
                        elif line.startswith(('1. ', '2. ', '3. ', '4. ', '5. ')):
                            # Numbered list
                            para = doc.add_paragraph()
                            para.style = 'List Number'
                            para.add_run(line[3:])
                        elif '**' in line:
                            # Bold text
                            para = doc.add_paragraph()
                            process_formatted_text(para, line)
                        else:
                            # Regular paragraph
                            para = doc.add_paragraph(line)
                
                # Handle any remaining table data
                if in_table and table_data:
                    create_table_in_doc(doc, table_data)
    
    # Save the document
    output_path = r'C:\Users\craig\Downloads\TRAX_Reports\TRAX_Diagnostic_Report.docx'
    doc.save(output_path)
    
    print(f"✅ Word report generated: {output_path}")
    print(f"📄 Report includes:")
    print("   - Professional title page")
    print("   - Detailed technical analysis")
    print("   - Formatted tables and sections")
    print("   - Analysis recommendations")
    
    return output_path

def create_table_in_doc(doc, table_data):
    """Create a formatted table in the Word document"""
    if not table_data:
        return
    
    # Determine table dimensions
    num_rows = len(table_data)
    num_cols = max(len(row) for row in table_data) if table_data else 0
    
    if num_cols == 0:
        return
    
    # Create table
    table = doc.add_table(rows=num_rows, cols=num_cols)
    table.style = 'Table Grid'
    
    # Populate table
    for i, row_data in enumerate(table_data):
        row = table.rows[i]
        for j, cell_data in enumerate(row_data):
            if j < len(row.cells):
                row.cells[j].text = cell_data
                # Make header row bold
                if i == 0:
                    row.cells[j].paragraphs[0].runs[0].bold = True

def process_formatted_text(paragraph, text):
    """Process text with bold formatting"""
    parts = text.split('**')
    for i, part in enumerate(parts):
        if i % 2 == 0:
            # Regular text
            if part:
                paragraph.add_run(part)
        else:
            # Bold text
            if part:
                run = paragraph.add_run(part)
                run.bold = True

if __name__ == "__main__":
    create_word_report() 