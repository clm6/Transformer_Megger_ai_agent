from trax_parser import extract_text_from_pdf
from trax_analyzer_enhanced import analyze_trax_report_enhanced
import os
import csv
import pandas as pd
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
from datetime import datetime

def process_file_with_word_report(pdf_path):
    text = extract_text_from_pdf(pdf_path)
    report = analyze_trax_report_enhanced(text)
    return report

def create_word_report_from_analysis(filename, analysis_text, output_dir):
    """Create a professional Word document from analysis text"""
    
    # Create a new Word document
    doc = Document()
    
    # Set up document properties
    doc.core_properties.title = f"TRAX Diagnostic Report - {filename}"
    doc.core_properties.author = "TRAX AI Analyzer"
    doc.core_properties.subject = "Transformer Diagnostic Analysis"
    
    # Title page
    title = doc.add_heading('TRANSFORMER DIAGNOSTIC REPORT', 0)
    title.alignment = WD_ALIGN_PARAGRAPH.CENTER
    
    # Add subtitle
    subtitle = doc.add_paragraph()
    subtitle.alignment = WD_ALIGN_PARAGRAPH.CENTER
    run = subtitle.add_run('Enhanced Technical Analysis')
    run.font.size = Pt(16)
    run.bold = True
    
    # Add spacing
    doc.add_paragraph()
    
    # Report details table
    details_table = doc.add_table(rows=4, cols=2)
    details_table.style = 'Table Grid'
    
    # Populate details table
    details_data = [
        ['Report File:', filename],
        ['Analysis Date:', datetime.now().strftime('%B %d, %Y')],
        ['Analysis Type:', 'Enhanced Technical Analysis'],
        ['Generated By:', 'TRAX AI Analyzer v2.0']
    ]
    
    for i, (label, value) in enumerate(details_data):
        row = details_table.rows[i]
        row.cells[0].text = label
        row.cells[1].text = value
        # Make labels bold
        row.cells[0].paragraphs[0].runs[0].bold = True
    
    # Add page break
    doc.add_page_break()
    
    # Add the analysis content
    # Split by sections and format appropriately
    sections = analysis_text.split('###')
    
    for section in sections:
        if section.strip():
            lines = section.strip().split('\n')
            if lines:
                # Section header
                header_text = lines[0].strip()
                if header_text:
                    # Clean up header text (remove emojis and markdown)
                    clean_header = header_text.replace('🔍', '').replace('⚡', '').replace('🔌', '').replace('🧯', '').replace('🧲', '').replace('🧠', '').replace('🔧', '').replace('**', '').strip()
                    
                    if clean_header:
                        heading = doc.add_heading(clean_header, level=1)
                
                # Section content
                content_lines = lines[1:]
                for line in content_lines:
                    line = line.strip()
                    if not line:
                        continue
                    
                    # Handle different line types
                    if line.startswith('- '):
                        # Bullet point
                        para = doc.add_paragraph()
                        para.style = 'List Bullet'
                        para.add_run(line[2:])
                    elif line.startswith(('1. ', '2. ', '3. ', '4. ', '5. ')):
                        # Numbered list
                        para = doc.add_paragraph()
                        para.style = 'List Number'
                        para.add_run(line[3:])
                    elif '|' in line and line.count('|') >= 2:
                        # Skip table formatting for now - could be enhanced
                        para = doc.add_paragraph(line)
                        para.style = 'Intense Quote'
                    else:
                        # Regular paragraph
                        para = doc.add_paragraph(line)
    
    # Save the document
    base_name = os.path.splitext(filename)[0]
    output_path = os.path.join(output_dir, f"TRAX_Report_{base_name}.docx")
    doc.save(output_path)
    
    return output_path

def main_with_word_reports(folder_path):
    results = []
    word_reports = []
    
    print("🔍 TRAX Analyzer - Enhanced Analysis with Word Reports")
    print("=" * 60)
    
    for filename in os.listdir(folder_path):
        if filename.lower().endswith(".pdf"):
            full_path = os.path.join(folder_path, filename)
            print(f"📄 Processing: {filename}")
            
            # Generate analysis
            report = process_file_with_word_report(full_path)
            results.append({
                "Filename": filename,
                "Enhanced_Technical_Analysis": report
            })
            
            # Generate Word report
            word_path = create_word_report_from_analysis(filename, report, folder_path)
            word_reports.append(word_path)
            print(f"   ✅ Word report: {os.path.basename(word_path)}")

    # Write CSV summary
    csv_path = os.path.join(folder_path, "trax_enhanced_diagnostics_summary.csv")
    with open(csv_path, mode="w", newline='', encoding="utf-8") as csvfile:
        fieldnames = ["Filename", "Enhanced_Technical_Analysis"]
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        for result in results:
            writer.writerow(result)

    print("\n🎉 ANALYSIS COMPLETE!")
    print("=" * 60)
    print(f"📊 CSV Summary: {os.path.basename(csv_path)}")
    print(f"📄 Word Reports Generated: {len(word_reports)}")
    for report in word_reports:
        print(f"   - {os.path.basename(report)}")
    
    return csv_path, word_reports

if __name__ == "__main__":
    import sys
    if len(sys.argv) != 2:
        print("🚀 TRAX Analyzer - Enhanced Analysis with Word Reports")
        print("=" * 60)
        print("Usage: python main_with_word_report.py /path/to/folder")
        print("\nThis will generate:")
        print("✅ Enhanced technical analysis (CSV)")
        print("✅ Professional Word reports for each PDF")
        print("✅ Detailed diagnostic tables and recommendations")
    else:
        main_with_word_reports(sys.argv[1]) 